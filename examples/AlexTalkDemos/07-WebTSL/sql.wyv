module sql

import metadata wyvern.collections.list
import wyvern.util.matching.regex
import tsls.glexer
import wyvern.ast
import wyvern.Int
import wyvern.option
import debug

/* some SQL examples

"CREATE TABLE Students ("
                  + "Name varchar(255),"
                  + "GPA float"
              + ")";
"INSERT INTO Students VALUES ('John',4.0)"
"UPDATE Students SET GPA=3.0 WHERE Name='John'"
"SELECT AVG(GPA) FROM Students"
*/

val tokens = new
	type Kind = Int
    
	val WHITESPACE:this.Kind = 1
	val EOF:this.Kind = 2
	val ERROR:this.Kind = 3
    
	val COMMA:this.Kind = 10
	val LPAREN:this.Kind = 11
	val RPAREN:this.Kind = 12
	val EQUALS:this.Kind = 13
    
	val FLOAT_CONST:this.Kind = 20
	val INT_CONST:this.Kind = 21
	val STRING_CONST:this.Kind = 22
    
	val AVG     :this.Kind = 30
	val CREATE  :this.Kind = 31
	val DROP    :this.Kind = 32
	val FROM    :this.Kind = 33
	val INSERT  :this.Kind = 34
	val INTO    :this.Kind = 35
	val SELECT  :this.Kind = 36
	val SET     :this.Kind = 37
	val TABLE   :this.Kind = 38
	val UPDATE  :this.Kind = 39

	val VALUES  :this.Kind = 40
	val WHERE   :this.Kind = 41
    
	val VARCHAR:this.Kind = 60
	val FLOAT:this.Kind = 61
    
	val IDENTIFIER:this.Kind = 70
	val EMBED_IDENTIFIER:this.Kind = 71

val lexer = glexer(tokens)

// local bindings to make things easier
type AST = ast.AST
type Option = option.Option
type None = option.None

def createScanner(input:String):lexer.Scanner
    // Create a scanner configuration, setting up the whitespace operator
    val config = lexer.makeScannerConfig(regex("[ \n\t]+"))

    // Add regular expressions and corresponding tokens
    config.addTokenKind(regex("\\z")       , tokens.EOF)

    config.addTokenKind(regex(",")       , tokens.COMMA)
    config.addTokenKind(regex("\\(")       , tokens.LPAREN)
    config.addTokenKind(regex("\\)")       , tokens.RPAREN)
    config.addTokenKind(regex("=")       , tokens.EQUALS)

    config.addTokenKind(regex("\\d+\\.\\d+")      , tokens.FLOAT_CONST)
    config.addTokenKind(regex("\\d+")      , tokens.INT_CONST)
    config.addTokenKind(regex("'[^']*'"), tokens.STRING_CONST)

    config.addTokenKind(regex("AVG"), tokens.AVG)
    config.addTokenKind(regex("CREATE"), tokens.CREATE)
    config.addTokenKind(regex("DROP"), tokens.DROP)
    config.addTokenKind(regex("FROM"), tokens.FROM)
    config.addTokenKind(regex("INSERT"), tokens.INSERT)
    config.addTokenKind(regex("INTO"), tokens.INTO)
    config.addTokenKind(regex("SELECT"), tokens.SELECT)
    config.addTokenKind(regex("SET"), tokens.SET)
    config.addTokenKind(regex("TABLE"), tokens.TABLE)
    config.addTokenKind(regex("UPDATE"), tokens.UPDATE)
    config.addTokenKind(regex("VALUES"), tokens.VALUES)
    config.addTokenKind(regex("WHERE"), tokens.WHERE)
    
    config.addTokenKind(regex("VARCHAR"), tokens.VARCHAR)
    config.addTokenKind(regex("FLOAT"), tokens.FLOAT)
    
    config.addTokenKind(regex("\\p{Alpha}\\w*"), tokens.IDENTIFIER)
    config.addTokenKind(regex("\\$\\p{Alpha}\\w*"), tokens.EMBED_IDENTIFIER)
    
    // create a scanner
    lexer.makeScanner(config, input)

////////////////////////////////////////////////////////////////////////////

def debugOut(t : lexer.Token):Unit
    debug.printInt(t.kind())
    debug.print(": ")
    debug.print(t.print())
    debug.println()

def lex(input:String):Unit
    val scanner = createScanner(input)
    
    // print the tokens, one at a time
    val t = scanner.nextToken()
    printTokens(scanner, t)

def printTokens(scanner : lexer.Scanner, token : lexer.Token) : Unit
    debugOut(token)
    val next = scanner.nextToken()
    (next.kind() == tokens.EOF).ifTrue(
       () => unit,
       () => printTokens(scanner, next))

// lex("UPDATE blah")
// lex("UPDATE Students SET GPA=3.0 WHERE Name='John'")
// lex("SELECT AVG(GPA) FROM Students")
// lex("INSERT INTO Students VALUES ('John',4.0)")
// lex("CREATE TABLE Students (Name varchar(255), GPA float)")

////////////////////////////////////////////////////////////////////////////

// SQLInsert ::= "INSERT" "IDENTIFIER"
def parseInsert(scanner : lexer.Scanner, ctx : system.Context):Option[AST]
  val token = scanner.nextToken()
  
  if (token.kind() == tokens.EOF)
      option.None[AST]() // need to have IDENTIFIER
    else
      if (token.kind() == tokens.IDENTIFIER)
          val insert : AST = ast.parseExpression("sql.sql.insert(\"" + token.print() + "\")\n", ctx)
          option.Some(insert)
        else
          option.None[AST]() // need to have IDENTIFIER

// SQLInsert ::= "UPDATE" "IDENTIFIER"
def parseUpdate(scanner : lexer.Scanner, ctx : system.Context):Option[AST]
  val token = scanner.nextToken()
  
  if (token.kind() == tokens.EOF)
      option.None[AST]() // need to have IDENTIFIER
    else
      if (token.kind() == tokens.IDENTIFIER)
          var next : lexer.Token = scanner.peekToken()
          var updateWhat : String = token.print()
          if (next.kind() == tokens.SET)
              next = scanner.nextToken() // SET
              next = scanner.nextToken()
              if (next.kind() == tokens.IDENTIFIER)
                  var setWhat : String = next.print()
                  next = scanner.nextToken()
                  if (next.kind() == tokens.EQUALS)
                      next = scanner.nextToken()
                      if (next.kind() == tokens.FLOAT_CONST)
                          var value : String = next.print()
                          val update : AST = ast.parseExpression("sql.sql.updateAndSet(\"" + updateWhat +
                            "\", \"" + setWhat + "\", \"" + value + "\")\n", ctx)
                          option.Some(update)
                        else
                          option.None[AST]() // need to have FLOAT after =
                    else
                      option.None[AST]() // need to have = after IDENTIFIER
                else
                  option.None[AST]() // need to have IDENTIFIER after SET
            else
              val update : AST = ast.parseExpression("sql.sql.update(\"" + token.print() + "\")\n", ctx)
              option.Some(update)
        else
          option.None[AST]() // need to have IDENTIFIER

// Parse until EOF.
def parseAllSQLStatements(scanner : lexer.Scanner, ctx : system.Context, l : list.List[AST]) : list.List[AST]
  val token = scanner.nextToken()
  // debugOut(token)
  var ast : option.Option[AST] = option.None[AST]()

  if (token.kind() != tokens.EOF)
      if (token.kind() == tokens.INSERT)
          ast = parseInsert(scanner, ctx)
        else
          if (token.kind() == tokens.UPDATE)
              ast = parseUpdate(scanner, ctx)
            else
              debug.print("SQL TSL ERROR: Undefined token encountered: " + token.print() + "\n")
      if (ast.isDefined)
        l.append(ast.get())
      parseAllSQLStatements(scanner, ctx, l)
    else
      l

// Convert expressions sequence to nested lets for lack of sequence.
def astListToLet(l : list.List[AST]) : AST
  if (l.length() == 0)
      ast.parseExpressionNoContext("unit")
    else
      if (l.get(0).isDefined)
          val e : AST = l.get(0).get()
          l.remove(0)
          ast.let("sequence", ast.types.unit(), e, astListToLet(l))
        else
          ast.parseExpressionNoContext("unit")

////////////////////////////////////////////////////////////////////////////

type SQL
  def insert(id : String) : Unit
  def update(id : String) : Unit
  def updateAndSet(id : String, set : String, v : String) : Unit

val sql : SQL = new
  def insert(id : String) : Unit
    debug.print("Running INSERT with argument: " + id + "\n")
  def update(id : String) : Unit
    debug.print("Running UPDATE with argument: " + id + "\n")
  def updateAndSet(id : String, set : String, v : String) : Unit
    debug.print("Running UPDATE with argument: " + id + " and setting " + set + " to value: " + v + "\n")

type SQLExpr
  def eval() : Unit

  metadata new
    // A parse function for SQL queries
    // SQLStatement ::= SQLInsert | SQLUpdate
    def parseTSL(input : String, ctx : system.Context) : option.Option[AST]
      val scanner = createScanner(input)

      var sqlStatements : list.List[AST] = list.make[AST]()
      sqlStatements = parseAllSQLStatements(scanner, ctx, sqlStatements)

      val defEval = ast.defDeclaration(
        "eval",
        list.make[ast.FormalArg](),
        ast.types.unit(),
        astListToLet(sqlStatements))
      val declList : list.List[ast.Decl] = list.make[ast.Decl]()
      declList.append(defEval)
      option.Some(ast.object(declList))
